{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tws80\\\\Documents\\\\React\\\\react-complete-guide-code\\\\extra-files\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage(props) {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  // const events = data.events;\n\n  // // if (data.isError) {\n  // //   return <p>{data.message}</p>;\n  // // }\n\n  // return <EventsList events={events} />;\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => {\n        /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw { message: \"Could not fetch events\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = response.json();\n    return resData.events;\n  }\n}\nexport function loader() {\n  // loader() is not a react component, i.e. it can't be used in react components.\n  // any browser functions can be used in loader functions\n  return defer({\n    events: loadEvents() // PROMISE due to async\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","props","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/tws80/Documents/React/react-complete-guide-code/extra-files/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\nimport { Suspense } from \"react\";\r\n\r\nfunction EventsPage(props) {\r\n  const { events } = useLoaderData();\r\n  // const events = data.events;\r\n\r\n  // // if (data.isError) {\r\n  // //   return <p>{data.message}</p>;\r\n  // // }\r\n\r\n  // return <EventsList events={events} />;\r\n  return (\r\n    <Suspense fallback={<p style={{ textAlign: \"center\" }}>Loading...</p>}>\r\n      <Await resolve={events}>\r\n        {(loadedEvents) => {\r\n          <EventsList events={loadedEvents} />;\r\n        }}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: \"Could not fetch events.\" };\r\n    // throw { message: \"Could not fetch events\" };\r\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: \"Could not fetch events\" }, { status: 500 });\r\n  } else {\r\n    const resData = response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  // loader() is not a react component, i.e. it can't be used in react components.\r\n  // any browser functions can be used in loader functions\r\n  return defer({\r\n    events: loadEvents(), // PROMISE due to async\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAO,CAAC,GAAGX,aAAa,CAAC,CAAC;EAClC;;EAEA;EACA;EACA;;EAEA;EACA,oBACEO,OAAA,CAACF,QAAQ;IAACO,QAAQ,eAAEL,OAAA;MAAGM,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACpER,OAAA,CAACJ,KAAK;MAACiB,OAAO,EAAET,MAAO;MAAAI,QAAA,EACnBM,YAAY,IAAK;QACjB,aAAAd,OAAA,CAACH,UAAU;UAACO,MAAM,EAAEU;QAAa;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACT,EAAA,CAlBQF,UAAU;EAAA,QACER,aAAa;AAAA;AAAAsB,EAAA,GADzBd,UAAU;AAoBnB,eAAeA,UAAU;AAEzB,eAAee,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,MAAMzB,IAAI,CAAC;MAAE0B,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAGL,QAAQ,CAACvB,IAAI,CAAC,CAAC;IAC/B,OAAO4B,OAAO,CAAClB,MAAM;EACvB;AACF;AAEA,OAAO,SAASmB,MAAMA,CAAA,EAAG;EACvB;EACA;EACA,OAAO5B,KAAK,CAAC;IACXS,MAAM,EAAEY,UAAU,CAAC,CAAC,CAAE;EACxB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}