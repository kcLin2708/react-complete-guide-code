{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tws80\\\\Documents\\\\React\\\\react-complete-guide-code\\\\code\\\\project-1\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport InvestmentForm from \"./components/UserInput/InvestmentForm\";\nimport ResultTable from \"./components/ResultTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet emptyData = [];\nfunction App() {\n  _s();\n  const [results, setResults] = useState(emptyData);\n  const calculateHandler = userInput => {\n    console.log(userInput);\n\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n    let totalInvestCapital = 0;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalInvestCapital += currentSavings;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalCapital: totalInvestCapital\n      });\n    }\n    console.log(\"Yearly result: \", yearlyData);\n    // do something with yearlyData ...\n    setResults(yearlyData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      onSaveData: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HJxg04zvM1TO4fwjaZJeTUuMxVU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","InvestmentForm","ResultTable","jsxDEV","_jsxDEV","emptyData","App","_s","results","setResults","calculateHandler","userInput","console","log","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","totalInvestCapital","i","yearlyInterest","push","year","savingsEndOfYear","totalCapital","children","fileName","_jsxFileName","lineNumber","columnNumber","onSaveData","_c","$RefreshReg$"],"sources":["C:/Users/tws80/Documents/React/react-complete-guide-code/code/project-1/01-starting-project/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Header from \"./components/Header/Header\";\r\nimport InvestmentForm from \"./components/UserInput/InvestmentForm\";\r\nimport ResultTable from \"./components/ResultTable\";\r\n\r\nlet emptyData = [];\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState(emptyData);\r\n\r\n  const calculateHandler = (userInput) => {\r\n    console.log(userInput);\r\n\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n    const yearlyData = []; // per-year results\r\n\r\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\r\n    const duration = +userInput[\"duration\"];\r\n    let totalInvestCapital = 0;\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n      const yearlyInterest = currentSavings * expectedReturn;\r\n      currentSavings += yearlyInterest + yearlyContribution;\r\n      totalInvestCapital += currentSavings;\r\n      yearlyData.push({\r\n        // feel free to change the shape of the data pushed to the array!\r\n        year: i + 1,\r\n        yearlyInterest: yearlyInterest,\r\n        savingsEndOfYear: currentSavings,\r\n        yearlyContribution: yearlyContribution,\r\n        totalCapital: totalInvestCapital,\r\n      });\r\n    }\r\n    console.log(\"Yearly result: \", yearlyData);\r\n    // do something with yearlyData ...\r\n    setResults(yearlyData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n\r\n      <InvestmentForm onSaveData={calculateHandler} />\r\n\r\n      {/* Todo: Show below table conditionally (only once result data is available) */}\r\n      {/* Show fallback text if no data is available */}\r\n\r\n      <ResultTable results={results} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,cAAc,MAAM,uCAAuC;AAClE,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,IAAIC,SAAS,GAAG,EAAE;AAElB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAACM,SAAS,CAAC;EAEjD,MAAMK,gBAAgB,GAAIC,SAAS,IAAK;IACtCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;;IAEtB;IACA;IACA,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC;IACvC,IAAIQ,kBAAkB,GAAG,CAAC;;IAE1B;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGN,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIM,cAAc,GAAGL,kBAAkB;MACrDG,kBAAkB,IAAIJ,cAAc;MACpCD,UAAU,CAACQ,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAET,cAAc;QAChCC,kBAAkB,EAAEA,kBAAkB;QACtCS,YAAY,EAAEN;MAChB,CAAC,CAAC;IACJ;IACAP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,UAAU,CAAC;IAC1C;IACAL,UAAU,CAACK,UAAU,CAAC;EACxB,CAAC;EAED,oBACEV,OAAA;IAAAsB,QAAA,gBACEtB,OAAA,CAACJ,MAAM;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEV1B,OAAA,CAACH,cAAc;MAAC8B,UAAU,EAAErB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAKhD1B,OAAA,CAACF,WAAW;MAACM,OAAO,EAAEA;IAAQ;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACvB,EAAA,CA/CQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}